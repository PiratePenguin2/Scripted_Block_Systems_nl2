//Version = 1.1.0.2
//Advanced
//Load,Station,Launch,Back,True,Switch1,1,Switch2,0
//Launch,Brake,FinalBrake,Front,True,Switch2,1,Switch1,0
//FinalBrake,Brake,Unload,Front,True
//Unload,Station,Load,Front,True,Switch1,0,Switch2,1

import com.nolimitscoaster.*;

public class SkyloopBlocks extends Script implements BlockSystemController, TrackTriggerListener{private static final int STATE_BLOCK_FREE = 0; 
 private static final int STATE_BLOCK_APPROACHING = 1;
 private TrackTrigger trim;
 private TrackTrigger switcht;
  private static final int STATE_BLOCK_LEAVING = 2;
  private static final int STATE_BLOCK_BEFORE_TRIGGER = 3;
  private static final int STATE_BLOCK_BEHIND_TRIGGER = 4;
  private static final int STATE_BLOCK_WAITING = 5;
  private static final int STATE_BLOCK_WAIT_FOR_CLEAR = 6;
 private static final int STATE_BLOCK_WAIT_FOR_ADVANCE = 7;
   private static final int STATE_BLOCK_IN_STATION = 8;
  private static final int STATE_BLOCK_APPROACHING_B = 9;
  private static final int STATE_BLOCK_LEAVING_B = 10;
  private static final int STATE_BLOCK_BEFORE_TRIGGER_B = 11;
  private static final int STATE_BLOCK_WAIT_FOR_CLEAR_B = 12;
private static final String scriptName = "SkyloopBlocks";
private static final int AUTO_MODE = 0;  private static final int MANUAL_BLOCK_MODE = 1;  private static final int FULL_MANUAL_MODE = 2;private Coaster coaster;
private SpecialTrack Switch1Switch;
private String Switch1SwitchInUse = "";
private SpecialTrack Switch2Switch;
private String Switch2SwitchInUse = "";
private Block LoadBlock;private float LoadBlockTime;
private Block LaunchBlock;private float LaunchBlockTime;
private Block FinalBrakeBlock;private float FinalBrakeBlockTime;
private Block UnloadBlock;private float UnloadBlockTime;
private int mode;
  public bool onInit(){String name; coaster = sim.getCoasterForEntityId(getParentEntityId()); if (coaster == null) {  System.err.println(scriptName + ": Not attached to coaster");   return false;  } trim = coaster.getTrackTrigger("TRIM"); trim.addTrackTriggerListener(this); switcht = coaster.getTrackTrigger("SWITCH"); switcht.addTrackTriggerListener(this); coaster.setBlockSystemController(this);
name = "Switch1"; Switch1Switch = coaster.getSpecialTrack(name); if (Switch1Switch == null) { System.err.println(scriptName + ": SpecialTrack '" + name + "' not found"); return false; }
name = "Switch2"; Switch2Switch = coaster.getSpecialTrack(name); if (Switch2Switch == null) { System.err.println(scriptName + ": SpecialTrack '" + name + "' not found"); return false; }
name = "Load";  LoadBlock = coaster.getBlock(name);   if (!checkAndSetInitialBlockState(LoadBlock, name))  {   return false;  }   
LoadBlock.setAdvanceBwdVisible(true);
name = "Launch";  LaunchBlock = coaster.getBlock(name);   if (!checkAndSetInitialBlockState(LaunchBlock, name))  {   return false;  }   
LaunchBlock.setAdvanceFwdVisible(true);
name = "FinalBrake";  FinalBrakeBlock = coaster.getBlock(name);   if (!checkAndSetInitialBlockState(FinalBrakeBlock, name))  {   return false;  }   
FinalBrakeBlock.setAdvanceFwdVisible(true);
name = "Unload";  UnloadBlock = coaster.getBlock(name);   if (!checkAndSetInitialBlockState(UnloadBlock, name))  {   return false;  }   
UnloadBlock.setAdvanceFwdVisible(true);
mode = AUTO_MODE; return true;  }
public void onExit(){}
//Script Generated by Musickid43's Script Generator
 public void onNextFrame(float tick)  {    if (mode != FULL_MANUAL_MODE)    {
processLoadBlock();
processLaunchBlock();
processFinalBrakeBlock();
processUnloadBlock();
if (mode == MANUAL_BLOCK_MODE) { updateControlPanel(); } } }
public void onAutoMode(Coaster c) { if (mode == FULL_MANUAL_MODE) {
setInitialBlockState(LoadBlock);
setInitialBlockState(LaunchBlock);
setInitialBlockState(FinalBrakeBlock);
setInitialBlockState(UnloadBlock);
 } mode = AUTO_MODE;  updateControlPanel();  }
public void onManualBlockMode(Coaster c) { if (mode == FULL_MANUAL_MODE)  {
setInitialBlockState(LoadBlock);
setInitialBlockState(LaunchBlock);
setInitialBlockState(FinalBrakeBlock);
setInitialBlockState(UnloadBlock);
} mode = MANUAL_BLOCK_MODE; updateControlPanel(); }
public void onFullManualMode(Coaster c)  {  mode = FULL_MANUAL_MODE; updateControlPanel(); }
public void onAdvanceFWDButton(Block block) {
if (block == LaunchBlock) { LaunchBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR); }
if (block == FinalBrakeBlock) { FinalBrakeBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR); }
if (block == UnloadBlock) { UnloadBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR); }}
public void onAdvanceBWDButton(Block block) {
if (block == LoadBlock) { LoadBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR_B);LoadBlock.getSection().setStationLeaving();}}
private static bool checkAndSetInitialBlockState(Block block, String name) { if (block == null) { System.err.println(scriptName + ": Block '" + name + "' not found"); return false;  } registerBlockStates(block); setInitialBlockState(block); return true; }
private static void setInitialBlockState(Block block) { if (block.getNumberOfTrainsOnBlock() > 0) { if (block.getSection().iStation()) { block.setState(STATE_BLOCK_IN_STATION); } else { block.setState(STATE_BLOCK_WAIT_FOR_ADVANCE); } } else { block.setState(STATE_BLOCK_FREE); } }
private static void registerBlockStates(Block block) { block.registerState(STATE_BLOCK_FREE, "Free", Block.LAMP_OFF);
block.registerState(STATE_BLOCK_APPROACHING, "Approaching", Block.LAMP_FLASHING); 
block.registerState(STATE_BLOCK_APPROACHING_B, "Approaching", Block.LAMP_FLASHING);
block.registerState(STATE_BLOCK_LEAVING, "Leaving", Block.LAMP_ON);
block.registerState(STATE_BLOCK_LEAVING_B, "Leaving", Block.LAMP_ON);
block.registerState(STATE_BLOCK_BEFORE_TRIGGER, "Before Trigger", Block.LAMP_ON);
block.registerState(STATE_BLOCK_BEFORE_TRIGGER_B, "Before Trigger", Block.LAMP_ON);
block.registerState(STATE_BLOCK_BEHIND_TRIGGER, "Behind Trigger", Block.LAMP_ON);
block.registerState(STATE_BLOCK_WAITING, "Waiting", Block.LAMP_ON); 
block.registerState(STATE_BLOCK_WAIT_FOR_CLEAR, "Waiting for Clear Block", Block.LAMP_ON); 
block.registerState(STATE_BLOCK_WAIT_FOR_CLEAR_B, "Waiting for Clear Block B", Block.LAMP_ON); 
block.registerState(STATE_BLOCK_WAIT_FOR_ADVANCE, "Waiting for Advance", Block.LAMP_ON);
block.registerState(STATE_BLOCK_IN_STATION, "In Station", Block.LAMP_ON);}
//Script Generated by Musickid43's Script Generator
private void updateControlPanel() {
Switch1Switch.setCanManualSwitchDirection(Switch1SwitchInUse == "");
Switch2Switch.setCanManualSwitchDirection(Switch2SwitchInUse == "");
LoadBlock.setAdvanceFwdEnabled(LoadBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && LoadBlockHasPathFwd());
LoadBlock.setAdvanceBwdEnabled(LoadBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && LoadBlockHasPathBwd());
LaunchBlock.setAdvanceFwdEnabled(LaunchBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && LaunchBlockHasPathFwd());
LaunchBlock.setAdvanceBwdEnabled(LaunchBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && LaunchBlockHasPathBwd());
FinalBrakeBlock.setAdvanceFwdEnabled(FinalBrakeBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && FinalBrakeBlockHasPathFwd());
FinalBrakeBlock.setAdvanceBwdEnabled(FinalBrakeBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && FinalBrakeBlockHasPathBwd());
UnloadBlock.setAdvanceFwdEnabled(UnloadBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && UnloadBlockHasPathFwd());
UnloadBlock.setAdvanceBwdEnabled(UnloadBlock.getState() == STATE_BLOCK_WAIT_FOR_ADVANCE && UnloadBlockHasPathBwd());
}
private void processLoadBlock() 
{
    switch (LoadBlock.getState()) 
    {
       case STATE_BLOCK_FREE: 
       LoadBlock.getSection().setTransportsOff();
	   LoadBlock.getSection().setBrakesOn();
        if(mode != AUTO_MODE)
        {
if(Switch1SwitchInUse == "LoadBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "LoadBlock")
Switch2SwitchInUse = "";

        }
       break;
       case STATE_BLOCK_APPROACHING: 
       PrepareLoadBlockLeaving(false);
       if (LoadBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "LoadBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "LoadBlock")
Switch2SwitchInUse = "";

            LoadBlock.setState(STATE_BLOCK_IN_STATION);
            LoadBlock.getSection().setStationEntering();
            LoadBlock.getSection().setStationNextBlockOccupied();
       }
       else 
       {
            LoadBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_APPROACHING_B: 
       PrepareLoadBlockLeaving(false);
       if (LoadBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "LoadBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "LoadBlock")
Switch2SwitchInUse = "";

            LoadBlock.setState(STATE_BLOCK_IN_STATION);
            LoadBlock.getSection().setStationEntering();
            LoadBlock.getSection().setStationNextBlockOccupied();
       }
       else 
       {
            LoadBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER: 
       PrepareLoadBlockLeaving(true);
       if (LoadBlock.getSection().isTrainBehindCenterOfSection()) 
       {
            LoadBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            LoadBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER_B: 
       PrepareLoadBlockLeaving(true);
       if (!LoadBlock.getSection().isTrainBehindCenterOfSection()) 
       {
            LoadBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            LoadBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEHIND_TRIGGER: 
				LoadBlock.setState(STATE_BLOCK_WAIT_FOR_ADVANCE);
       break;
       case STATE_BLOCK_WAIT_FOR_ADVANCE: 
       if (mode == AUTO_MODE) 
       {
            LoadBlock.getSection().setStationLeaving();
LoadBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR_B);
        }
        break;
        case STATE_BLOCK_LEAVING:
        LoadBlock.getSection().setBrakesOff();
        LoadBlock.getSection().setTransportsStandardFwdOn();
		LoadBlock.getSection().setTransportsLaunchFwdOn();
        if (LoadBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            LoadBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_LEAVING_B:
        LoadBlock.getSection().setBrakesOff();
        LoadBlock.getSection().setTransportsStandardBwdOn();
		LoadBlock.getSection().setTransportsLaunchBwdOn();
        if (LoadBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            LoadBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_WAIT_FOR_CLEAR: 
			
            LoadBlock.getSection().setStationLeaving();
                if(mode == AUTO_MODE)
                {
                    if(!PrepareLoadBlockLeaving(true))
                    {
                        LoadBlock.getSection().setStationNextBlockOccupied();
                        break;
                    }
                }

        case STATE_BLOCK_WAIT_FOR_CLEAR_B:
            LoadBlock.getSection().setStationLeaving();
                if(mode == AUTO_MODE)
                {
                    if(!PrepareLoadBlockLeaving(true))
                    {
                        LoadBlock.getSection().setTransportsOff();
				        LoadBlock.getSection().setBrakesOn();
                        break;
                    }
                }

            if((Switch1SwitchInUse == "" || Switch1SwitchInUse == "LaunchBlock") && Switch1Switch.getSwitchDirection() == 1 && (Switch2SwitchInUse == "" || Switch2SwitchInUse == "LaunchBlock") && Switch2Switch.getSwitchDirection() == 0)
                {Switch1SwitchInUse = "LaunchBlock";
Switch2SwitchInUse = "LaunchBlock";
                LaunchBlock.setState(STATE_BLOCK_APPROACHING_B);
                LoadBlock.setState(STATE_BLOCK_LEAVING_B);
                LoadBlock.getSection().setStationNextBlockClear();
                break;
                }
                
            LoadBlock.getSection().setStationNextBlockOccupied();
			LoadBlock.getSection().setTransportsOff();
			LoadBlock.getSection().setBrakesOn();
            break;
        case STATE_BLOCK_IN_STATION:
		   
        if (LoadBlock.getSection().isStationWaitingForClearBlock())
        {
            if(LoadBlockHasPathFwd() || LoadBlockHasPathBwd())
            {
                LoadBlock.getSection().setStationNextBlockClear();
            }
            else
            {
                PrepareLoadBlockLeaving(false);
            }
        }
        else if(LoadBlock.getSection().isStationWaitingForAdvance())
        {
            LoadBlock.setState(STATE_BLOCK_WAIT_FOR_ADVANCE);
        }
        break;
    }
}
private bool PrepareLoadBlockLeaving(bool clearswitch)
    {
        if(LaunchBlock.getState() == STATE_BLOCK_FREE && mode == AUTO_MODE)
        {
            bool isready = true;if(Switch1SwitchInUse == "" && Switch2SwitchInUse == ""){Switch1SwitchInUse = "LaunchBlock";
Switch2SwitchInUse = "LaunchBlock";}
            //System.out.println("Switch1Switch " + Switch1SwitchInUse + Switch1Switch.getSwitchDirection());
            if((Switch1SwitchInUse != "" && Switch1SwitchInUse != "LaunchBlock") || Switch1Switch.getSwitchDirection() == -1)
	            isready = false;
            else{
		        Switch1Switch.setSwitchDirection(1);                
            }
            
            //System.out.println("Switch2Switch " + Switch2SwitchInUse + Switch2Switch.getSwitchDirection());
            if((Switch2SwitchInUse != "" && Switch2SwitchInUse != "LaunchBlock") || Switch2Switch.getSwitchDirection() == -1)
	            isready = false;
            else{
		        Switch2Switch.setSwitchDirection(0);                
            }
            
            return isready;
        }
        else if(clearswitch)
        {
                if(Switch1SwitchInUse == "LoadBlock")
                    Switch1SwitchInUse = "";
                
                if(Switch2SwitchInUse == "LoadBlock")
                    Switch2SwitchInUse = "";
                
        }
        return false;
    }
private bool LoadBlockHasPathFwd()
{return false;
        }
private bool LoadBlockHasPathBwd()
{
    if((Switch1SwitchInUse == "" || Switch1SwitchInUse == "LaunchBlock") && Switch1Switch.getSwitchDirection() == 1 && (Switch2SwitchInUse == "" || Switch2SwitchInUse == "LaunchBlock") && Switch2Switch.getSwitchDirection() == 0 && LaunchBlock.getState() == STATE_BLOCK_FREE) return true;
    return false;
}


private void processLaunchBlock() 
{
    switch (LaunchBlock.getState()) 
    {
       case STATE_BLOCK_FREE: 
       LaunchBlock.getSection().setTransportsOff();
	   //LaunchBlock.getSection().setBrakesOn();
        if(mode != AUTO_MODE)
        {
if(Switch1SwitchInUse == "LaunchBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "LaunchBlock")
Switch2SwitchInUse = "";

        }
       break;
       case STATE_BLOCK_APPROACHING: 
	   
       PrepareLaunchBlockLeaving(false);
       if (LaunchBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "LaunchBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "LaunchBlock")
Switch2SwitchInUse = "";

            LaunchBlock.setState(STATE_BLOCK_BEFORE_TRIGGER);
       }
       else 
       {
            LaunchBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_APPROACHING_B: 
       PrepareLaunchBlockLeaving(false);
       if (LaunchBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "LaunchBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "LaunchBlock")
Switch2SwitchInUse = "";

            LaunchBlock.setState(STATE_BLOCK_BEFORE_TRIGGER_B);
       }
       else 
       {
            LaunchBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER: 
       PrepareLaunchBlockLeaving(true);
       LaunchBlock.getSection().setBrakesTrim();
       LaunchBlock.getSection().setTransportsStandardFwdDependingOnBrake();
       if (LaunchBlock.getSection().isTrainBehindBrakeTrigger()) 
       {
            LaunchBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            LaunchBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER_B: 
       PrepareLaunchBlockLeaving(true);
       LaunchBlock.getSection().setBrakesTrim();
       LaunchBlock.getSection().setTransportsStandardBwdDependingOnBrake();
       if (!LaunchBlock.getSection().isTrainBehindBrakeTrigger()) 
       {
            LaunchBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            LaunchBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEHIND_TRIGGER: 
                LaunchBlock.getSection().setTransportsOff();
				LaunchBlock.setState(STATE_BLOCK_WAIT_FOR_ADVANCE);
       break;
       case STATE_BLOCK_WAIT_FOR_ADVANCE: 
       if (mode == AUTO_MODE) 
       {LaunchBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR);
        }
		else{
			LaunchBlock.getSection().setBrakesOn();
            LaunchBlock.getSection().setTransportsOff();
		}
        break;
        case STATE_BLOCK_LEAVING:
        LaunchBlock.getSection().setBrakesOff();
        LaunchBlock.getSection().setTransportsStandardFwdOn();
		LaunchBlock.getSection().setTransportsLaunchFwdOn();
        if (LaunchBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            LaunchBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_LEAVING_B:
        LaunchBlock.getSection().setBrakesOff();
        LaunchBlock.getSection().setTransportsStandardBwdOn();
		LaunchBlock.getSection().setTransportsLaunchBwdOn();
        if (LaunchBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            LaunchBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_WAIT_FOR_CLEAR: 
			Switch2Switch.setSwitchDirection(1);
           if (!LaunchBlock.getSection().isBrakeCompleteStop() || LaunchBlockTime > LaunchBlock.getSection().getBrakeWaitTime()) 
           {
                if(mode == AUTO_MODE)
                {
                    if(!PrepareLaunchBlockLeaving(true))
                    {
                        LaunchBlock.getSection().setTransportsOff();
				        LaunchBlock.getSection().setBrakesOn();
                        break;
                    }
                }

            if((Switch2SwitchInUse == "" || Switch2SwitchInUse == "FinalBrakeBlock") && Switch2Switch.getSwitchDirection() == 1)
                {Switch2SwitchInUse = "FinalBrakeBlock";
                FinalBrakeBlock.setState(STATE_BLOCK_APPROACHING);
                LaunchBlock.setState(STATE_BLOCK_LEAVING);
                break;
                }
                
                LaunchBlock.getSection().setTransportsOff();
				LaunchBlock.getSection().setBrakesOn();
           }
           else 
           {
                if(LaunchBlock.getSection().getTrainOnSection().getSpeed() == 0)
				LaunchBlockTime += sim.getCurSimulationTickSec();

				LaunchBlock.getSection().setTransportsOff();
				LaunchBlock.getSection().setBrakesOn();
           }
    break;
        case STATE_BLOCK_WAIT_FOR_CLEAR_B:
           if (!LaunchBlock.getSection().isBrakeCompleteStop() || LaunchBlockTime > LaunchBlock.getSection().getBrakeWaitTime()) 
           {
                if(mode == AUTO_MODE)
                {
                    if(!PrepareLaunchBlockLeaving(true))
                    {
                        LaunchBlock.getSection().setTransportsOff();
				        LaunchBlock.getSection().setBrakesOn();
                        break;
                    }
                }

           }
           else 
           {
                if(LaunchBlock.getSection().getTrainOnSection().getSpeed() == 0)
				LaunchBlockTime += sim.getCurSimulationTickSec();

				LaunchBlock.getSection().setTransportsOff();
				LaunchBlock.getSection().setBrakesOn();
           }
    break;
    }
}
private bool PrepareLaunchBlockLeaving(bool clearswitch)
    {
        if(FinalBrakeBlock.getState() == STATE_BLOCK_FREE && mode == AUTO_MODE)
        {
            bool isready = true;if(Switch2SwitchInUse == ""){Switch2SwitchInUse = "FinalBrakeBlock";}
            //System.out.println("Switch2Switch " + Switch2SwitchInUse + Switch2Switch.getSwitchDirection());
            if((Switch2SwitchInUse != "" && Switch2SwitchInUse != "FinalBrakeBlock") || Switch2Switch.getSwitchDirection() == -1)
	            isready = false;
            else{
		        Switch2Switch.setSwitchDirection(1);                
            }
            
            return isready;
        }
        else if(clearswitch)
        {
                if(Switch2SwitchInUse == "LaunchBlock")
                    Switch2SwitchInUse = "";
                
        }
        return false;
    }
private bool LaunchBlockHasPathFwd()
{
    if((Switch2SwitchInUse == "" || Switch2SwitchInUse == "FinalBrakeBlock") && Switch2Switch.getSwitchDirection() == 1 && FinalBrakeBlock.getState() == STATE_BLOCK_FREE) return true;
    return false;
        }
private bool LaunchBlockHasPathBwd()
{return false;
}


private void processFinalBrakeBlock() 
{
    switch (FinalBrakeBlock.getState()) 
    {
       case STATE_BLOCK_FREE: 
       FinalBrakeBlock.getSection().setTransportsOff();
	   FinalBrakeBlock.getSection().setBrakesOn();
        if(mode != AUTO_MODE)
        {
if(Switch1SwitchInUse == "FinalBrakeBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "FinalBrakeBlock")
Switch2SwitchInUse = "";

        }
       break;
       case STATE_BLOCK_APPROACHING: 
       PrepareFinalBrakeBlockLeaving(false);
       if (FinalBrakeBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "FinalBrakeBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "FinalBrakeBlock")
Switch2SwitchInUse = "";

            FinalBrakeBlock.setState(STATE_BLOCK_BEFORE_TRIGGER);
       }
       else 
       {
            FinalBrakeBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_APPROACHING_B: 
       PrepareFinalBrakeBlockLeaving(false);
       if (FinalBrakeBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "FinalBrakeBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "FinalBrakeBlock")
Switch2SwitchInUse = "";

            FinalBrakeBlock.setState(STATE_BLOCK_BEFORE_TRIGGER_B);
       }
       else 
       {
            FinalBrakeBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER: 
       PrepareFinalBrakeBlockLeaving(true);
       FinalBrakeBlock.getSection().setBrakesTrim();
       FinalBrakeBlock.getSection().setTransportsStandardFwdDependingOnBrake();
       if (FinalBrakeBlock.getSection().isTrainBehindBrakeTrigger()) 
       {
            FinalBrakeBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            FinalBrakeBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER_B: 
       PrepareFinalBrakeBlockLeaving(true);
       FinalBrakeBlock.getSection().setBrakesTrim();
       FinalBrakeBlock.getSection().setTransportsStandardBwdDependingOnBrake();
       if (!FinalBrakeBlock.getSection().isTrainBehindBrakeTrigger()) 
       {
            FinalBrakeBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            FinalBrakeBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEHIND_TRIGGER: 
                FinalBrakeBlock.getSection().setTransportsOff();
				FinalBrakeBlock.setState(STATE_BLOCK_WAIT_FOR_ADVANCE);
       break;
       case STATE_BLOCK_WAIT_FOR_ADVANCE: 
       if (mode == AUTO_MODE) 
       {FinalBrakeBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR);
        }
		else{
			FinalBrakeBlock.getSection().setBrakesOn();
            FinalBrakeBlock.getSection().setTransportsOff();
		}
        break;
        case STATE_BLOCK_LEAVING:
        FinalBrakeBlock.getSection().setBrakesOff();
        FinalBrakeBlock.getSection().setTransportsStandardFwdOn();
		FinalBrakeBlock.getSection().setTransportsLaunchFwdOn();
        if (FinalBrakeBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            FinalBrakeBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_LEAVING_B:
        FinalBrakeBlock.getSection().setBrakesOff();
        FinalBrakeBlock.getSection().setTransportsStandardBwdOn();
		FinalBrakeBlock.getSection().setTransportsLaunchBwdOn();
        if (FinalBrakeBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            FinalBrakeBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_WAIT_FOR_CLEAR: 
           if (!FinalBrakeBlock.getSection().isBrakeCompleteStop() || FinalBrakeBlockTime > FinalBrakeBlock.getSection().getBrakeWaitTime()) 
           {
                if(mode == AUTO_MODE)
                {
                    if(!PrepareFinalBrakeBlockLeaving(true))
                    {
                        FinalBrakeBlock.getSection().setTransportsOff();
				        FinalBrakeBlock.getSection().setBrakesOn();
                        break;
                    }
                }

                UnloadBlock.setState(STATE_BLOCK_APPROACHING);
                FinalBrakeBlock.setState(STATE_BLOCK_LEAVING);
                break;
           }
           else 
           {
                if(FinalBrakeBlock.getSection().getTrainOnSection().getSpeed() == 0)
				FinalBrakeBlockTime += sim.getCurSimulationTickSec();

				FinalBrakeBlock.getSection().setTransportsOff();
				FinalBrakeBlock.getSection().setBrakesOn();
           }
    break;
        case STATE_BLOCK_WAIT_FOR_CLEAR_B:
           if (!FinalBrakeBlock.getSection().isBrakeCompleteStop() || FinalBrakeBlockTime > FinalBrakeBlock.getSection().getBrakeWaitTime()) 
           {
                if(mode == AUTO_MODE)
                {
                    if(!PrepareFinalBrakeBlockLeaving(true))
                    {
                        FinalBrakeBlock.getSection().setTransportsOff();
				        FinalBrakeBlock.getSection().setBrakesOn();
                        break;
                    }
                }

           }
           else 
           {
                if(FinalBrakeBlock.getSection().getTrainOnSection().getSpeed() == 0)
				FinalBrakeBlockTime += sim.getCurSimulationTickSec();

				FinalBrakeBlock.getSection().setTransportsOff();
				FinalBrakeBlock.getSection().setBrakesOn();
           }
    break;
    }
}
private bool PrepareFinalBrakeBlockLeaving(bool clearswitch)
    {
        if(UnloadBlock.getState() == STATE_BLOCK_FREE && mode == AUTO_MODE)
        {
            bool isready = true;
            return isready;
        }
        else if(clearswitch)
        {
        }
        return false;
    }
private bool FinalBrakeBlockHasPathFwd()
{
    if(UnloadBlock.getState() == STATE_BLOCK_FREE) return true;
    return false;
        }
private bool FinalBrakeBlockHasPathBwd()
{return false;
}


private void processUnloadBlock() 
{
    switch (UnloadBlock.getState()) 
    {
       case STATE_BLOCK_FREE: 
       UnloadBlock.getSection().setTransportsOff();
	   UnloadBlock.getSection().setBrakesOn();
        if(mode != AUTO_MODE)
        {
if(Switch1SwitchInUse == "UnloadBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "UnloadBlock")
Switch2SwitchInUse = "";

        }
       break;
       case STATE_BLOCK_APPROACHING: 
       PrepareUnloadBlockLeaving(false);
       if (UnloadBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "UnloadBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "UnloadBlock")
Switch2SwitchInUse = "";

            UnloadBlock.setState(STATE_BLOCK_IN_STATION);
            UnloadBlock.getSection().setStationEntering();
            UnloadBlock.getSection().setStationNextBlockOccupied();
       }
       else 
       {
            UnloadBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_APPROACHING_B: 
       PrepareUnloadBlockLeaving(false);
       if (UnloadBlock.getSection().isTrainOnSection()) 
       {
if(Switch1SwitchInUse == "UnloadBlock")
Switch1SwitchInUse = "";

if(Switch2SwitchInUse == "UnloadBlock")
Switch2SwitchInUse = "";

            UnloadBlock.setState(STATE_BLOCK_IN_STATION);
            UnloadBlock.getSection().setStationEntering();
            UnloadBlock.getSection().setStationNextBlockOccupied();
       }
       else 
       {
            UnloadBlock.getSection().setBrakesOn();
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER: 
       PrepareUnloadBlockLeaving(true);
       if (UnloadBlock.getSection().isTrainBehindCenterOfSection()) 
       {
            UnloadBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            UnloadBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEFORE_TRIGGER_B: 
       PrepareUnloadBlockLeaving(true);
       if (!UnloadBlock.getSection().isTrainBehindCenterOfSection()) 
       {
            UnloadBlock.setState(STATE_BLOCK_BEHIND_TRIGGER);
            UnloadBlockTime = 0;
       }
       break;
       case STATE_BLOCK_BEHIND_TRIGGER: 
	   
				UnloadBlock.setState(STATE_BLOCK_WAIT_FOR_ADVANCE);
       break;
       case STATE_BLOCK_WAIT_FOR_ADVANCE: 
       if (mode == AUTO_MODE) 
       {
            UnloadBlock.getSection().setStationLeaving();
UnloadBlock.setState(STATE_BLOCK_WAIT_FOR_CLEAR);
        }
        break;
        case STATE_BLOCK_LEAVING:
        UnloadBlock.getSection().setBrakesOff();
        UnloadBlock.getSection().setTransportsStandardFwdOn();
		UnloadBlock.getSection().setTransportsLaunchFwdOn();
        if (UnloadBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            UnloadBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_LEAVING_B:
        UnloadBlock.getSection().setBrakesOff();
        UnloadBlock.getSection().setTransportsStandardBwdOn();
		UnloadBlock.getSection().setTransportsLaunchBwdOn();
        if (UnloadBlock.getNumberOfTrainsOnBlock() == 0) 
        {
            UnloadBlock.setState(STATE_BLOCK_FREE);
        }
        break;
        case STATE_BLOCK_WAIT_FOR_CLEAR: 
			
            UnloadBlock.getSection().setStationLeaving();
                if(mode == AUTO_MODE)
                {
                    if(!PrepareUnloadBlockLeaving(true))
                    {
                        UnloadBlock.getSection().setStationNextBlockOccupied();
                        break;
                    }
                }

            if((Switch1SwitchInUse == "" || Switch1SwitchInUse == "LoadBlock") && Switch1Switch.getSwitchDirection() == 0)
                {Switch1SwitchInUse = "LoadBlock";
                LoadBlock.setState(STATE_BLOCK_APPROACHING);
                UnloadBlock.setState(STATE_BLOCK_LEAVING);
                UnloadBlock.getSection().setStationNextBlockClear();
                break;
                }
                
            UnloadBlock.getSection().setStationNextBlockOccupied();
            UnloadBlock.getSection().setTransportsOff();
			UnloadBlock.getSection().setBrakesOn();
            break;
                case STATE_BLOCK_WAIT_FOR_CLEAR_B: 
System.err.println(scriptName + ": Assigned backwards block when no backwards block exists for Unload");
break;
        case STATE_BLOCK_IN_STATION:
		
        if (UnloadBlock.getSection().isStationWaitingForClearBlock())
        {
            if(UnloadBlockHasPathFwd() || UnloadBlockHasPathBwd())
            {
                UnloadBlock.getSection().setStationNextBlockClear();
            }
            else
            {
                PrepareUnloadBlockLeaving(false);
            }
        }
        else if(UnloadBlock.getSection().isStationWaitingForAdvance())
        {
            UnloadBlock.setState(STATE_BLOCK_WAIT_FOR_ADVANCE);
        }
        break;
    }
}
private bool PrepareUnloadBlockLeaving(bool clearswitch)
    {
        if(LoadBlock.getState() == STATE_BLOCK_FREE && mode == AUTO_MODE)
        {
            bool isready = true;if(Switch1SwitchInUse == ""){Switch1SwitchInUse = "LoadBlock";}
            //System.out.println("Switch1Switch " + Switch1SwitchInUse + Switch1Switch.getSwitchDirection());
            if((Switch1SwitchInUse != "" && Switch1SwitchInUse != "LoadBlock") || Switch1Switch.getSwitchDirection() == -1)
	            isready = false;
            else{
		        Switch1Switch.setSwitchDirection(0);                
            }
            
            return isready;
        }
        else if(clearswitch)
        {
                if(Switch1SwitchInUse == "UnloadBlock")
                    Switch1SwitchInUse = "";
                
        }
        return false;
    }


public void onTrainEntering(TrackTrigger trigger, Train t)

            {
            if(trigger == trim){
			LaunchBlock.setState(STATE_BLOCK_FREE);
			Switch1SwitchInUse = "";
			Switch2SwitchInUse = "";
			Switch2Switch.setSwitchDirection(0);
			Switch1Switch.setSwitchDirection(1);
			System.out.println("freed");}
			
            }
         public void onTrainLeaving(TrackTrigger trigger, Train t)

            {
			if(trigger == switcht){
				LoadBlock.setState(STATE_BLOCK_FREE); 
				Switch1SwitchInUse = "";
				Switch2SwitchInUse = "";}
            }



private bool UnloadBlockHasPathFwd()
{
    if((Switch1SwitchInUse == "" || Switch1SwitchInUse == "LoadBlock") && Switch1Switch.getSwitchDirection() == 0 && (Switch2SwitchInUse == "" || Switch2SwitchInUse == "LoadBlock") && LoadBlock.getState() == STATE_BLOCK_FREE) return true;
    return false;
        }
private bool UnloadBlockHasPathBwd()
{return false;
}

}
//Script Generated by Musickid43's Script Generator
