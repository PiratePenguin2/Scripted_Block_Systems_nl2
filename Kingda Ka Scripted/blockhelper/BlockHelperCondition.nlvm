package blockhelper;

import com.nolimitscoaster.*;


/**
 * Helper class for simplifying implementation of block scripts 
 */
public class BlockHelperCondition
{
  private SpecialTrack forkSwitch;
  private SpecialTrack mergeSwitch;

  //private int mergeSwitchState = (int) mergeSwitch.getSpecialTrack();

  private int forkSwitchState = (int) forkSwitch.getSpecialTrack();
  //private int forkSwitchCondition = 

    // Constructor for Block condition
    BlockHelperCondition(int type, com.nolimitscoaster.Block object, int param, bool canPrepare) {
      _type = type;
      _object = object;
      _param = param;
      _canPrepare = canPrepare;
    }

  // Constructor for SpecialTrack condition
  BlockHelperCondition(int type, com.nolimitscoaster.SpecialTrack object, int param, bool canPrepare) {
      _type = type;
      _object = object;
      _param = param;
      _canPrepare = canPrepare;
    }

  // Constructor for null condition with float param
  BlockHelperCondition(int type, Object object, float param, bool canPrepare) {
    _type = type;
    _object = object;
    _param = param;
    _canPrepare = canPrepare;
  }
  
  bool isTrue(bool prepare, bool activeSwitch) {
    // Use forkSwitch and mergeSwitch as needed
    // Correct the method call to get the state of forkSwitch
    if (forkSwitch != null) {
      // Assuming getState() returns the state of the switch
      forkSwitchState = (int) forkSwitch.getState();
    }

    switch (_type)
    {
    case CONDITION_BLOCK_FREE:
      {
        Block block = (Block)_object;
        
        return BlockHelper.STATE_BLOCK_FREE == block.getState();
      }
      
    case CONDITION_CHANGE_SWITCH:
      {
        SpecialTrack track = (SpecialTrack)_object;
        if (activeSwitch && (!prepare || _canPrepare) && forkSwitchState != -1) //Altered to fix dual station problem
        {
          track.setSwitchDirection((int)_param);
        }
        return track.getSwitchDirection() == (int)_param;        
      }
      
    case CONDITION_WAIT:
      if (prepare)
      {
        return true;
      }
      if (_sumTime >= _param)
      {
        return true; 
      }
      _sumTime += NoLimits.getSimulator().getCurSimulationTickSec();
      return false;
    }
    return false;
  }
  
  void acknowledge(bool backwards)
  {
    switch (_type)
    {
    case CONDITION_BLOCK_FREE:
      {
        Block block = (Block)_object;
        
        block.setState(backwards ? BlockHelper.STATE_BLOCK_APPROACHING_BWD : BlockHelper.STATE_BLOCK_APPROACHING);
      }
      break;
    case CONDITION_WAIT:
      // reset timer
      _sumTime = 0;
      break;
    }    
  }
  
  Block queryBlock()
  {
    if (_object instanceof Block)
    {
      return (Block)_object; 
    }
    return null;
  }

  // Method to set the state of the fork switch when a block is freed
  public void setForkSwitchState(int state) {
    forkSwitchState = state;
  }

  // Method to control the fork switch state based on block frees
  public void updateForkSwitchState(bool freedBlockIsLoadStation) {
    if (freedBlockIsLoadStation) {
      forkSwitchState = 1; // Align with load station
    } else {
      forkSwitchState = 0; // Align with unload station
    }
  }

  // Method to handle merge switch behavior when multiple stations are ready to dispatch
  public void handleMergeSwitch(bool isReadyToDispatch) {
    if (isReadyToDispatch && forkSwitchState != -1) {
      // Set the direction of the merge switch based on the readiness of the stations
      if (forkSwitchState == 0) {
        // Align the merge switch to the left if the left station is ready to dispatch
        mergeSwitch.setSwitchDirection(0);
      } else {
        // Align the merge switch to the right if the right station is ready to dispatch
        mergeSwitch.setSwitchDirection(1);
      }
    }
  }
  
  static final int CONDITION_BLOCK_FREE = 0;
  static final int CONDITION_CHANGE_SWITCH = 1;
  static final int CONDITION_IS_SWITCH = 2;
  static final int CONDITION_WAIT = 3;

  //static final int CONDITION_WAIT = 3;
  
  private int _type;
  private Object _object;
  private double _param;
  
  private bool _canPrepare;
  
  private double _sumTime;
}
