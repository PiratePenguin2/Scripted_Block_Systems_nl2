import blockhelper.*;
import com.nolimitscoaster.*;

public class PT_STRYKER extends Script{
    private BlockHelperController blockHelperController;

    public bool onInit(){
        Coaster coaster = sim.getCoasterForEntityId(getParentEntityId());
        blockHelperController = new BlockHelperController(coaster);

        BlockHelper stationBlock = blockHelperController.createStationBlock("Station");

        BlockHelper swingBrakeBlock = blockHelperController.createBrakeBlock("SwingBrake");
        BlockHelper swingLaunchBlock = blockHelperController.createBrakeBlock("SwingLaunch");

        BlockHelper finalBrakeBlock = blockHelperController.createBrakeBlock("FinalBrake");


        BlockHelper transferBoostBlock = blockHelperController.createBrakeBlock("TransferBoost");
        BlockHelper lift1Block = blockHelperController.createLiftBlock("Lift1");

        BlockHelper preLift2Block = blockHelperController.createBrakeBlock("PreLift2");
        BlockHelper lift2Block = blockHelperController.createLiftBlock("Lift2");

        BlockHelper ready1Block = blockHelperController.createBrakeBlock("Ready1");
        BlockHelper ready2Block = blockHelperController.createBrakeBlock("Ready2");


        //BlockHelper storage1Block = blockHelperController.createStorageBlock("Storage1");
        //BlockHelper storage2Block = blockHelperController.createStorageBlock("Storage2");
        //BlockHelper storage3Block = blockHelperController.createStorageBlock("Storage3");

        SpecialTrack swingBrakeSwitch = coaster.getSpecialTrack("SwingBrakeSwitch");  //Default 1/1
        SpecialTrack swingLaunchSwitch = coaster.getSpecialTrack("SwingLaunchSwitch");    //Default 0/1


    //Unload
        unloadBlock.setLeaveModeMoveFwd();
        unloadBlock.selectFwdConditions();
        unloadBlock.addConditionBlockFree(loadBlock);
    //Load
        loadBlock.setLeaveModeMoveFwd();
        loadBlock.selectFwdConditions();
        loadBlock.addConditionBlockFree(transferBoostBlock);

    //TransferBoost
        transferBoostBlock.setLeaveModeMoveFwd();
        transferBoostBlock.selectFwdConditions();
        transferBoostBlock.addConditionBlockFree(lift1Block);
        //transferBoostBlock.addConditionChangeSwitch(forkSwitch, 1, false);

        //transferBoostBlock.selectFwdConditions();
        //transferBoostBlock.addConditionBlockFree(storage1Block);
        //transferBoostBlock.addConditionChangeSwitch(forkSwitch, 0, false);
    //Lift1
        lift1Block.setLeaveModeMoveFwd();
        lift1Block.selectFwdConditions();
        lift1Block.addConditionBlockFree(preLift2Block);

    //PreLift2
        preLift2Block.setLeaveModeMoveFwd();
        preLift2Block.selectFwdConditions();
        preLift2Block.addConditionBlockFree(lift2Block);
    //Lift1
        lift2Block.setLeaveModeMoveFwd();
        lift2Block.selectFwdConditions();
        lift2Block.addConditionBlockFree(ready1Block);

    //Ready1
        ready1Block.setLeaveModeMoveFwd();
        ready1Block.selectFwdConditions();
        ready1Block.addConditionBlockFree(ready2Block);
    //Ready2
        ready2Block.setLeaveModeMoveFwd();
        ready2Block.selectFwdConditions();
        ready2Block.addConditionBlockFree(unloadBlock);


    //Storage1
        storage1Block.selectBwdConditions();
        storage1Block.addConditionBlockFree(transferBoostBlock);
        storage1Block.addConditionChangeSwitch(forkSwitch, 0, false);

        storage1Block.selectFwdConditions();
        storage1Block.addConditionBlockFree(storage2Block);

    //Storage2
        storage2Block.selectBwdConditions();
        storage2Block.addConditionBlockFree(storage1Block);
    /*
        storage1Block.selectFwdConditions();
        storage1Block.addConditionBlockFree(storage3Block);

    //Storage3
        storage3Block.selectBwdConditions();
        storage3Block.addConditionBlockFree(storage2Block);
    */

        return true;
    }

    public void onNextFrame(float tick){
        blockHelperController.process();
    }
}
